Consider a scenario in which the author had access to NATURALIZE. The author might highlight the parameter names and ask NATURALIZE to evaluate them. At that point it would have not only have identified res and str as names that are inconsistent with the naming conventions of parameters in the codebase, but would also have suggested better names. The author may have also thought to himself “Is the constructor on line 3 too long?” or “Should the empty constructor body be on it’s own line and should it have a space inside?” Here again, NATURALIZE would have provided immediate, valuable answers based on the the conventions of the team. NATURALIZE would indicate that the call to the base constructor should be moved to the next line and indented to be consonant with team conventions and that in this codebase empty method bodies do not need their own lines. Furthermore it would indicate that some empty methods contain one space between the braces while others do not, so there is no implicit convention to follow. After querying NATURALIZE about his stylistic choices, the author can then be confident that his change is consistent with the norms of the team and is more likely to be approved during review. Furthermore, by leveraging NATURALIZE, fellow project members wouldn’t need to be bothered by questions about conventions, nor would they need to provide feedback about conventions during review. We have observed that such scenarios occur in open source projects as well.